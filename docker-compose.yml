version: '3.8'

services:
  # 메인 애플리케이션
  yameyame-app:
    build:
      context: .
      target: base
    container_name: yameyame-app
    ports:
      - "3000:3000"
      - "9999:9999"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://yameyame:${DB_PASSWORD:-devpassword}@postgres:5432/yameyame_db
      - JWT_SECRET=${JWT_SECRET:-production-change-me}
      - MONITORING_ENABLED=true
      - REDIS_URL=redis://redis:6379
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - yameyame-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: yameyame-db
    environment:
      POSTGRES_DB: yameyame_db
      POSTGRES_USER: yameyame
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - yameyame-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yameyame -d yameyame_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (캐시 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: yameyame-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devredis}
    volumes:
      - redis_data:/data
    networks:
      - yameyame-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: yameyame-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - yameyame-network
    depends_on:
      - yameyame-app
    restart: unless-stopped
    profiles:
      - production

  # 모니터링 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: yameyame-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - yameyame-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: yameyame-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - yameyame-network
    restart: unless-stopped
    profiles:
      - monitoring

# 개발 환경용 오버라이드
  yameyame-dev:
    build:
      target: development
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=sqlite:./dev.db
    command: ["npm", "run", "dev"]
    profiles:
      - development

# 네트워크 정의
networks:
  yameyame-network:
    driver: bridge
    name: yameyame-net

# 볼륨 정의
volumes:
  postgres_data:
    name: yameyame_postgres_data
  redis_data:
    name: yameyame_redis_data
  app_logs:
    name: yameyame_app_logs
  app_data:
    name: yameyame_app_data
  nginx_logs:
    name: yameyame_nginx_logs
  prometheus_data:
    name: yameyame_prometheus_data
  grafana_data:
    name: yameyame_grafana_data