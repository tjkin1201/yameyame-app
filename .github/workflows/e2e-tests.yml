name: E2E Tests - React Native App

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'worktrees/frontend-ui/**'
      - 'worktrees/backend-api/**'
      - 'e2e/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'worktrees/frontend-ui/**'
      - 'worktrees/backend-api/**'
      - 'e2e/**'
  schedule:
    # 매일 새벽 2시에 실행 (KST 11시)
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - auth
          - features
          - performance
          - cross-platform

env:
  NODE_VERSION: '18'
  API_URL: 'http://localhost:3000'
  BASE_URL: 'http://localhost:8081'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

  backend-setup:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'worktrees/backend-api/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./worktrees/backend-api
        run: npm ci

      - name: Start backend server
        working-directory: ./worktrees/backend-api
        run: |
          npm run dev:mock &
          sleep 30
          curl -f http://localhost:3000/api/health || exit 1
        env:
          NODE_ENV: test

      - name: Cache backend setup
        uses: actions/cache@v3
        with:
          path: ./worktrees/backend-api/node_modules
          key: backend-${{ needs.setup.outputs.cache-key }}

  frontend-setup:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'worktrees/frontend-ui/yameyame-app/package-lock.json'

      - name: Install Expo CLI
        run: npm install -g @expo/cli

      - name: Install frontend dependencies
        working-directory: ./worktrees/frontend-ui/yameyame-app
        run: npm ci

      - name: Cache frontend setup
        uses: actions/cache@v3
        with:
          path: ./worktrees/frontend-ui/yameyame-app/node_modules
          key: frontend-${{ needs.setup.outputs.cache-key }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [backend-setup, frontend-setup]
    if: github.event.inputs.test_suite == 'smoke' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore backend cache
        uses: actions/cache@v3
        with:
          path: ./worktrees/backend-api/node_modules
          key: backend-${{ needs.setup.outputs.cache-key }}

      - name: Restore frontend cache
        uses: actions/cache@v3
        with:
          path: ./worktrees/frontend-ui/yameyame-app/node_modules
          key: frontend-${{ needs.setup.outputs.cache-key }}

      - name: Start backend server
        working-directory: ./worktrees/backend-api
        run: |
          npm run dev:mock &
          echo $! > backend.pid
          sleep 30
        env:
          NODE_ENV: test

      - name: Start Expo development server
        working-directory: ./worktrees/frontend-ui/yameyame-app
        run: |
          npx expo start --web --non-interactive &
          echo $! > expo.pid
          sleep 60
        env:
          EXPO_USE_DEV_SERVER: true

      - name: Install E2E dependencies
        working-directory: ./e2e
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./e2e
        run: npx playwright install --with-deps chromium

      - name: Run smoke tests
        working-directory: ./e2e
        run: npm run test:smoke
        env:
          API_URL: ${{ env.API_URL }}
          BASE_URL: ${{ env.BASE_URL }}

      - name: Upload smoke test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: e2e/test-results/
          retention-days: 7

      - name: Cleanup processes
        if: always()
        run: |
          [ -f worktrees/backend-api/backend.pid ] && kill $(cat worktrees/backend-api/backend.pid) || true
          [ -f worktrees/frontend-ui/yameyame-app/expo.pid ] && kill $(cat worktrees/frontend-ui/yameyame-app/expo.pid) || true

  auth-tests:
    runs-on: ubuntu-latest
    needs: [backend-setup, frontend-setup]
    if: github.event.inputs.test_suite == 'auth' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        uses: ./.github/actions/setup-test-env

      - name: Run authentication tests
        working-directory: ./e2e
        run: npm run test:auth
        env:
          API_URL: ${{ env.API_URL }}
          BASE_URL: ${{ env.BASE_URL }}

      - name: Upload auth test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: auth-test-results
          path: e2e/test-results/
          retention-days: 7

  feature-tests:
    runs-on: ubuntu-latest
    needs: [backend-setup, frontend-setup]
    if: github.event.inputs.test_suite == 'features' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    strategy:
      matrix:
        test-group: [navigation, features, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        uses: ./.github/actions/setup-test-env

      - name: Run ${{ matrix.test-group }} tests
        working-directory: ./e2e
        run: npm run test:${{ matrix.test-group }}
        env:
          API_URL: ${{ env.API_URL }}
          BASE_URL: ${{ env.BASE_URL }}

      - name: Upload ${{ matrix.test-group }} test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.test-group }}-test-results
          path: e2e/test-results/
          retention-days: 7

  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-setup, frontend-setup]
    if: github.event.inputs.test_suite == 'performance' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        uses: ./.github/actions/setup-test-env

      - name: Run performance tests
        working-directory: ./e2e
        run: npm run test:performance
        env:
          API_URL: ${{ env.API_URL }}
          BASE_URL: ${{ env.BASE_URL }}

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: e2e/test-results/
          retention-days: 30

      - name: Parse performance metrics
        if: always()
        working-directory: ./e2e
        run: |
          if [ -f test-results/results.json ]; then
            node -e "
              const results = require('./test-results/results.json');
              console.log('Performance Summary:');
              results.suites?.forEach(suite => {
                suite.specs?.forEach(spec => {
                  console.log(\`- \${spec.title}: \${spec.ok ? 'PASS' : 'FAIL'}\`);
                });
              });
            "
          fi

  cross-platform-tests:
    runs-on: ubuntu-latest
    needs: [backend-setup, frontend-setup]
    if: github.event.inputs.test_suite == 'cross-platform' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    strategy:
      matrix:
        device: [mobile, tablet]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        uses: ./.github/actions/setup-test-env

      - name: Install additional browsers for cross-platform
        working-directory: ./e2e
        run: npx playwright install --with-deps webkit firefox

      - name: Run cross-platform tests (${{ matrix.device }})
        working-directory: ./e2e
        run: |
          if [ "${{ matrix.device }}" == "mobile" ]; then
            npm run test:mobile
          else
            npm run test:tablet
          fi
        env:
          API_URL: ${{ env.API_URL }}
          BASE_URL: ${{ env.BASE_URL }}

      - name: Upload ${{ matrix.device }} test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cross-platform-${{ matrix.device }}-results
          path: e2e/test-results/
          retention-days: 7

  test-report:
    runs-on: ubuntu-latest
    needs: [smoke-tests, auth-tests, feature-tests, performance-tests, cross-platform-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./test-artifacts

      - name: Combine test results
        run: |
          mkdir -p combined-results
          find test-artifacts -name "*.json" -exec cp {} combined-results/ \;
          find test-artifacts -name "*.xml" -exec cp {} combined-results/ \;

      - name: Generate HTML report
        working-directory: ./e2e
        run: |
          npm ci
          npx playwright show-report ../combined-results --host 0.0.0.0

      - name: Upload combined test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: combined-test-report
          path: |
            combined-results/
            e2e/playwright-report/
          retention-days: 30

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 🎭 E2E Test Results\n\n';
            
            // 결과 파일들 확인
            const artifactDir = './test-artifacts';
            if (fs.existsSync(artifactDir)) {
              const files = fs.readdirSync(artifactDir, { recursive: true });
              const resultFiles = files.filter(f => f.endsWith('results.json'));
              
              comment += '### Test Summary\n';
              comment += '| Test Suite | Status | Duration |\n';
              comment += '|------------|--------|----------|\n';
              
              resultFiles.forEach(file => {
                const suiteName = path.dirname(file);
                comment += `| ${suiteName} | ⏳ Processing | - |\n`;
              });
            } else {
              comment += '⚠️ No test results found\n';
            }
            
            comment += '\n[View detailed report in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notification:
    runs-on: ubuntu-latest
    needs: [test-report]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify on test failure
        run: |
          echo "E2E tests failed on main branch!"
          # 여기에 Slack, Discord, 이메일 등의 알림 설정 추가 가능
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 YameYame E2E tests failed on main branch!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [test-report]
    if: always()
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => {
                const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
                return ageInDays > 7 && artifact.name.includes('test-results');
              });
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }