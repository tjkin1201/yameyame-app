name: YAMEYAME CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 코드 품질 및 테스트
  quality-check:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: |
        npm ci
        npm run setup:check

    - name: 린트 검사
      run: npm run lint

    - name: 포맷팅 검사
      run: npm run format:check

    - name: 설정 검증
      run: npm run config:validate

    - name: 보안 스캔
      run: npm audit --audit-level=high

    - name: 타입스크립트 컴파일 검사
      run: npx tsc --noEmit

    - name: 품질 보고서 업로드
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: |
          coverage/
          lint-results.json

  # 단위 테스트
  test:
    name: 단위 테스트
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js ${{ matrix.node-version }} 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 단위 테스트 실행
      run: npm run test:unit

    - name: 통합 테스트 실행
      run: npm run test:integration

    - name: 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 빌드 테스트
  build-test:
    name: 빌드 테스트
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 프로덕션 빌드
      run: npm run build:prod

    - name: 빌드 결과물 검증
      run: |
        ls -la worktrees/*/dist/ || echo "빌드 결과물 확인 중..."
        npm run build:analyze

    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          worktrees/*/dist/
          worktrees/*/build/
        retention-days: 5

  # E2E 테스트
  e2e-test:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: build-test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: yameyame_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 테스트 환경 설정
      run: |
        cp .env.example .env.test
        npm run setup:check

    - name: E2E 테스트 실행
      run: |
        npm run dev:test &
        sleep 30
        npm run test:e2e
      env:
        DATABASE_URL: postgresql://test:testpass@localhost:5432/yameyame_test

    - name: 테스트 결과 업로드
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-results
        path: |
          e2e-results/
          screenshots/

  # Docker 이미지 빌드
  docker-build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: [quality-check, test, build-test]
    if: github.event_name == 'push'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3

    - name: 레지스트리 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}

  # 보안 스캔
  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Trivy 취약점 스캐너 실행
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 보안 스캔 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 스테이징 배포 (develop 브랜치)
  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: [e2e-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.yameyame.app
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: 스테이징 서버 배포
      run: |
        echo "🚀 스테이징 환경에 배포 중..."
        # 실제 배포 스크립트로 교체
        # docker-compose -f docker-compose.staging.yml up -d

    - name: 배포 후 헬스체크
      run: |
        sleep 30
        curl -f https://staging.yameyame.app/health || exit 1

    - name: 알림 발송
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 프로덕션 배포 (main 브랜치 + 릴리스)
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [e2e-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'release'
    environment:
      name: production
      url: https://yameyame.app
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: 프로덕션 서버 배포
      run: |
        echo "🚀 프로덕션 환경에 배포 중..."
        # 실제 배포 스크립트로 교체
        # docker-compose -f docker-compose.prod.yml up -d

    - name: 데이터베이스 마이그레이션
      run: |
        # 데이터베이스 마이그레이션 실행
        echo "📊 데이터베이스 마이그레이션 실행 중..."

    - name: 캐시 워밍업
      run: |
        echo "🔥 캐시 워밍업 중..."
        curl -X POST https://yameyame.app/api/admin/cache/warm

    - name: 배포 후 헬스체크
      run: |
        sleep 60
        curl -f https://yameyame.app/health || exit 1

    - name: 모니터링 확인
      run: |
        curl -f https://yameyame.app/monitoring/health || exit 1

    - name: 성공 알림
      uses: 8398a7/action-slack@v3
      with:
        status: 'success'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: '🎉 프로덕션 배포 완료!'

  # 성능 테스트 (선택적)
  performance-test:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: 성능 테스트 실행
      run: |
        npm install -g artillery
        artillery run performance/load-test.yml --output report.json

    - name: 성능 리포트 생성
      run: |
        artillery report report.json --output performance-report.html

    - name: 성능 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html