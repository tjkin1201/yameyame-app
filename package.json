{
  "name": "yameyame",
  "version": "0.3.0",
  "description": "동배즐 - 동탄 배드민턴 동호회 통합 관리 시스템",
  "main": "index.js",
  "scripts": {
    "start": "echo \"🚀 빠른 시작: npm run dev\"",
    "hello": "echo \"👋 환영합니다! YAMEYAME 프로젝트입니다\\n🚀 빠른 시작: npm run dev\\n📊 모니터링: npm run dashboard\\n🔧 도움말: npm run help\"",
    "help": "node -e \"console.log('🔧 YAMEYAME 프로젝트 명령어\\n\\n📍 주요 명령어:\\n  npm run dev          - 개발 서버 시작 (권장)\\n  npm run dev:turbo     - 빠른 시작 (사전검사 스킵)\\n  npm run dev:mock      - 목업 모드로 시작\\n  npm run dashboard     - 모니터링 대시보드 열기\\n  npm run stop          - 모든 서비스 중지\\n\\n🔍 관리 명령어:\\n  npm run status        - 서비스 상태 확인\\n  npm run health        - 헬스체크\\n  npm run setup         - 초기 환경 설정\\n\\n🧹 유지보수:\\n  npm run clean         - 임시 파일 정리\\n  npm run quality       - 코드 품질 검사\\n\\n🏗️ 빌드:\\n  npm run build         - 프로덕션 빌드\\n  npm run test          - 테스트 실행\\n\\n📚 더 많은 명령어: npm run scripts')\"",
    "scripts": "node -e \"const pkg = require('./package.json'); console.log('\\n📚 사용 가능한 모든 스크립트:\\n'); Object.keys(pkg.scripts).sort().forEach(s => console.log('  npm run ' + s.padEnd(20) + (pkg.scripts[s].length > 50 ? pkg.scripts[s].substring(0,50) + '...' : pkg.scripts[s])));\"",
    
    "dev": "node autorun.js",
    "dev:turbo": "node autorun.js --turbo --skip-prereq",
    "dev:mock": "node autorun.js --mock",
    "dev:sequential": "node autorun.js --sequential",
    "dev:no-monitoring": "node autorun.js --no-monitoring",
    
    "stop": "powershell ./dev-workflow.ps1 -Action stop",
    "status": "powershell ./dev-workflow.ps1 -Action status",
    "health": "powershell ./dev-workflow.ps1 -Action health",
    "dashboard": "start http://localhost:9999",
    
    "setup": "node setup.js",
    "setup:worktrees": "powershell ./setup-worktrees.ps1",
    "setup:full": "npm run setup && npm run setup:worktrees && npm run config:validate",
    "setup:check": "node -e \"const checks = ['config/services.json', 'autorun.js', 'monitoring/monitoring-server.js']; checks.forEach(f => console.log(require('fs').existsSync(f) ? '✅' : '❌', f));\"",
    
    "monitoring": "cd monitoring && node monitoring-server.js",
    "benchmark": "powershell ./dev-workflow-enhanced.ps1 -Action benchmark",
    "optimize": "powershell ./dev-workflow-enhanced.ps1 -Action optimize",
    
    "backend": "cd worktrees/backend-api && npm run dev",
    "frontend": "cd worktrees/frontend-ui && expo start",
    
    "test": "npm run test --workspaces",
    "test:unit": "npm run test:unit --workspaces",
    "test:integration": "npm run test:integration --workspaces",
    "test:watch": "npm run test:unit --workspaces -- --watch",
    
    "build": "npm run build --workspaces",
    "build:prod": "npm run build:prod --workspaces",
    "build:analyze": "npm run build --workspaces && node -e \"console.log('📊 빌드 완료. 세부사항은 각 워크스페이스 로그를 확인하세요.')\"",
    
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    
    "quality": "npm run lint && npm run format:check",
    "quality:fix": "npm run lint:fix && npm run format",
    "quality:full": "npm run quality && npm run test",
    
    "clean": "powershell ./dev-workflow.ps1 -Action clean",
    "clean:full": "npm run clean && npm install",
    "clean:node_modules": "npx rimraf node_modules **/node_modules && npm install",
    
    "config:validate": "node -e \"console.log('✅ 설정 검증:', require('./config/services.json').version)\"",
    "config:show": "node -e \"const cfg=require('./config/services.json'); console.log('📋 서비스 구성:', Object.keys(cfg.services).length + '개'); Object.entries(cfg.services).forEach(([k,v])=>console.log('  •', v.name, '→', v.port));\"",
    "config:ports": "node -e \"const cfg=require('./config/services.json'); console.log('🌐 포트 구성:'); Object.entries(cfg.services).forEach(([k,v])=>console.log('  •', v.port + ':', v.name));\"",
    
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    
    "prepare": "husky install || echo 'Husky not available'",
    "postinstall": "npm run setup:check && echo '\\n🎉 설치 완료! npm run help로 시작하세요.'"
  },
  "keywords": [
    "react-native",
    "expo",
    "nodejs",
    "mongodb",
    "badminton",
    "sports-app",
    "realtime",
    "chat"
  ],
  "author": "taejo",
  "license": "MIT",
  "workspaces": [
    "worktrees/*"
  ],
  "engines": {
    "node": ">=18.0.0"
  },
  "repository": {
    "type": "git",
    "url": "."
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-native": "^4.1.0",
    "eslint-plugin-unused-imports": "^4.1.4",
    "nodemon": "^3.0.1",
    "prettier": "^3.6.2",
    "typescript": "^5.6.3"
  },
  "dependencies": {
    "axios": "^1.6.2",
    "dotenv": "^16.3.1",
    "fs-extra": "^11.2.0"
  }
}
